/*
 * Brave Data Insights API
 * Brave Data Insights is an API that delivers real-time insights for better risk and fraud decisions. Our API can obtains one or more insights based on data collected from the user's mobile devices or web applications.<br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.brave.dataevents.client.api;

import io.brave.dataevents.client.ApiCallback;
import io.brave.dataevents.client.ApiClient;
import io.brave.dataevents.client.ApiException;
import io.brave.dataevents.client.ApiResponse;
import io.brave.dataevents.client.Configuration;
import io.brave.dataevents.client.Pair;
import io.brave.dataevents.client.ProgressRequestBody;
import io.brave.dataevents.client.ProgressResponseBody;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import io.brave.dataevents.client.model.Errors;
import io.brave.dataevents.client.model.InlineResponse200;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsApi {
    private ApiClient apiClient;

    public InsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getInsight
     * @param xApiKey The Consumer Key assigned to the application you have registered in API Hub. (required)
     * @param username Username provided by Círculo de Crédito (required)
     * @param password Password provided by Círculo de Crédito (required)
     * @param dataId &#x60;Unique identifier of the dataset collected by Brave Data Events API.&#x60; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getInsightCall(String xApiKey, String username, String password, String dataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/datasets/{dataId}/insight"
            .replaceAll("\\{" + "dataId" + "\\}", apiClient.escapeString(dataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));
        if (username != null)
        localVarHeaderParams.put("username", apiClient.parameterToString(username));
        if (password != null)
        localVarHeaderParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInsightValidateBeforeCall(String xApiKey, String username, String password, String dataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling getInsight(Async)");
        }
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getInsight(Async)");
        }
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling getInsight(Async)");
        }
        // verify the required parameter 'dataId' is set
        if (dataId == null) {
            throw new ApiException("Missing the required parameter 'dataId' when calling getInsight(Async)");
        }
        
        okhttp3.Call call = getInsightCall(xApiKey, username, password, dataId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get dataset insights
     * This API endpoint is used to return information about dataset insights. The insight response can be fully customized based on your request.
     * @param xApiKey The Consumer Key assigned to the application you have registered in API Hub. (required)
     * @param username Username provided by Círculo de Crédito (required)
     * @param password Password provided by Círculo de Crédito (required)
     * @param xSignature Signature created with your private key (SHA256withECDSA - secp384r). API Hub verifies the signature matches with the URL using your public key. Your public key must be uploaded in the API Hub Portal Applications section. (required)
     * @param dataId &#x60;Unique identifier of the dataset collected by Brave Data Events API.&#x60; (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getInsight(String xApiKey, String username, String password, String dataId) throws ApiException {
        ApiResponse<InlineResponse200> resp = getInsightWithHttpInfo(xApiKey, username, password, dataId);
        return resp.getData();
    }

    /**
     * Get dataset insights
     * This API endpoint is used to return information about dataset insights. The insight response can be fully customized based on your request.
     * @param xApiKey The Consumer Key assigned to the application you have registered in API Hub. (required)
     * @param username Username provided by Círculo de Crédito (required)
     * @param password Password provided by Círculo de Crédito (required)
     * @param xSignature Signature created with your private key (SHA256withECDSA - secp384r). API Hub verifies the signature matches with the URL using your public key. Your public key must be uploaded in the API Hub Portal Applications section. (required)
     * @param dataId &#x60;Unique identifier of the dataset collected by Brave Data Events API.&#x60; (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getInsightWithHttpInfo(String xApiKey, String username, String password, String dataId) throws ApiException {
        okhttp3.Call call = getInsightValidateBeforeCall(xApiKey, username, password, dataId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get dataset insights (asynchronously)
     * This API endpoint is used to return information about dataset insights. The insight response can be fully customized based on your request.
     * @param xApiKey The Consumer Key assigned to the application you have registered in API Hub. (required)
     * @param username Username provided by Círculo de Crédito (required)
     * @param password Password provided by Círculo de Crédito (required)
     * @param xSignature Signature created with your private key (SHA256withECDSA - secp384r). API Hub verifies the signature matches with the URL using your public key. Your public key must be uploaded in the API Hub Portal Applications section. (required)
     * @param dataId &#x60;Unique identifier of the dataset collected by Brave Data Events API.&#x60; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getInsightAsync(String xApiKey, String username, String password, String xSignature, String dataId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getInsightValidateBeforeCall(xApiKey, username, password, dataId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.execute(call, localVarReturnType);
        return call;
    }
}
